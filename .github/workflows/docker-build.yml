name: Docker Build and Push - ESP8266 DHT22 Monitor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: renaneunao
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: renaneunao/esp8266-dht22
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Update Docker Hub description
      if: github.ref == 'refs/heads/main'
      run: |
        curl -X PATCH \
          -H "Authorization: JWT ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "full_description": "# ESP8266 DHT22 Monitor - Sistema IoT\n\nSistema completo de monitoramento de temperatura e umidade usando ESP8266 com sensor DHT22, conectado a uma aplicação web Flask que armazena e visualiza os dados em tempo real.\n\n## 🏗️ Arquitetura\n\n```\nESP8266 + DHT22 → WiFi → Flask API → SQLite → Interface Web\n```\n\n## ✨ Características\n\n- 🌡️ **Monitoramento em Tempo Real**: Temperatura e umidade\n- 📊 **Dashboard Interativo**: Gráficos e estatísticas\n- 🔄 **Sincronização Automática**: Dados enviados a cada minuto\n- 📱 **Interface Responsiva**: Funciona em mobile e desktop\n- 🐳 **Docker Ready**: Pronto para deploy em containers\n- 🔐 **API Segura**: Autenticação com API keys\n- 📈 **Analytics**: Estatísticas e tendências\n\n## 🚀 Tecnologias\n\n- **Backend**: Flask, SQLAlchemy, SQLite\n- **Frontend**: HTML5, Bootstrap, Chart.js\n- **IoT**: ESP8266, DHT22, Arduino\n- **Deploy**: Docker, Nginx, Gunicorn\n- **CI/CD**: GitHub Actions\n\n## 📦 Como usar\n\n```bash\n# Executar com Docker Compose\ndocker-compose up -d\n\n# Acessar a aplicação\nhttp://localhost:5005\n\n# API endpoints\ncurl http://localhost:5005/api/sensor-data/latest\n```\n\n## 🔧 Configuração ESP8266\n\n1. Configure WiFi no arquivo `config.h`\n2. Configure URL do servidor\n3. Faça upload do código para ESP8266\n4. Conecte sensor DHT22 no pino D4\n\n## 📊 Endpoints da API\n\n- `GET /api/sensor-data` - Dados históricos\n- `GET /api/sensor-data/latest` - Últimos dados\n- `GET /api/sensor-data/stats` - Estatísticas\n- `POST /api/sensor-data` - Enviar dados (ESP8266)\n- `GET /api/health` - Health check\n\n## 🔐 Segurança\n\n- API Key obrigatória para envio de dados\n- Rate limiting configurado\n- Headers de segurança\n- HTTPS com SSL/TLS\n\n## 📈 Monitoramento\n\n- Health checks automáticos\n- Logs estruturados\n- Métricas de performance\n- Alertas de sistema\n\n## 🛠️ Desenvolvimento\n\n```bash\n# Instalar dependências\npip install -r app/requirements.txt\n\n# Executar em desenvolvimento\ncd app && python app.py\n\n# Testar API\ncurl -X POST http://localhost:5005/api/sensor-data \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-API-Key: sua_api_key\" \\\n  -d \"{\\\"temperature\\\":25.6,\\\"humidity\\\":60.2,\\\"device_id\\\":\\\"ESP8266_001\\\"}\"\n```\n\n## 📞 Suporte\n\n- **Documentação**: [GitHub Wiki](https://github.com/renaneunao/esp8266-dht22/wiki)\n- **Issues**: [GitHub Issues](https://github.com/renaneunao/esp8266-dht22/issues)\n- **Email**: renan@exemplo.com\n\n---\n\n**⚠️ Importante**: Configure adequadamente as variáveis de ambiente e API keys antes do uso em produção!"
          }' \
          "https://hub.docker.com/v2/repositories/renaneunao/esp8266-dht22/"
    
    - name: Verify deployment
      run: |
        echo "✅ Docker image built and pushed successfully to Docker Hub!"
        echo "📦 Image tags: ${{ steps.meta.outputs.tags }}"
        echo "🌐 Docker Hub: https://hub.docker.com/r/renaneunao/esp8266-dht22"
        echo "🚀 Ready for deployment!"
    
    - name: Security scan
      if: github.event_name == 'push'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: renaneunao/esp8266-dht22-monitor:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      if: github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
